#!/usr/bin/env bash
set -Eeuo pipefail

GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
RED='\033[0;31m'
NC='\033[0m'

log_info() { echo -e "${CYAN}$1${NC}"; }
log_warn() { echo -e "${YELLOW}$1${NC}"; }
log_success() { echo -e "${GREEN}$1${NC}"; }
log_error() { echo -e "${RED}$1${NC}" >&2; }

on_error() {
    log_error "–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ $1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞."
}
trap 'on_error $LINENO' ERR

prompt() {
    local message="$1"
    local __var="$2"
    local value
    read -r -p "$message" value < /dev/tty
    printf -v "$__var" '%s' "$value"
}

confirm() {
    local message="$1"
    local reply
    read -r -n1 -p "$message" reply < /dev/tty || true
    echo
    [[ "$reply" =~ ^[Yy]$ ]]
}

sanitize_domain() {
    local input="$1"
    echo "$input" \
        | sed -e 's%^https\?://%%' -e 's%/.*$%%' \
        | tr -cd 'A-Za-z0-9.-' \
        | tr '[:upper:]' '[:lower:]'
}

get_server_ip() {
    local ipv4_re='^([0-9]{1,3}\.){3}[0-9]{1,3}$'
    local ip
    for url in \
        "https://api.ipify.org" \
        "https://ifconfig.co/ip" \
        "https://ipv4.icanhazip.com"; do
        ip=$(curl -fsS "$url" 2>/dev/null | tr -d '\r\n\t ')
        if [[ $ip =~ $ipv4_re ]]; then
            echo "$ip"
            return 0
        fi
    done
    ip=$(hostname -I 2>/dev/null | awk '{print $1}')
    if [[ $ip =~ $ipv4_re ]]; then
        echo "$ip"
    fi
}

resolve_domain_ip() {
    local domain="$1"
    local ipv4_re='^([0-9]{1,3}\.){3}[0-9]{1,3}$'
    local ip
    ip=$(getent ahostsv4 "$domain" 2>/dev/null | awk '{print $1}' | head -n1)
    if [[ $ip =~ $ipv4_re ]]; then
        echo "$ip"
        return 0
    fi
    if command -v dig >/dev/null 2>&1; then
        ip=$(dig +short A "$domain" 2>/dev/null | grep -E "$ipv4_re" | head -n1)
        if [[ $ip =~ $ipv4_re ]]; then
            echo "$ip"
            return 0
        fi
    fi
    if command -v nslookup >/dev/null 2>&1; then
        ip=$(nslookup -type=A "$domain" 2>/dev/null | awk '/^Address: /{print $2; exit}')
        if [[ $ip =~ $ipv4_re ]]; then
            echo "$ip"
            return 0
        fi
    fi
    if command -v ping >/dev/null 2>&1; then
        ip=$(ping -4 -c1 -W1 "$domain" 2>/dev/null | sed -n 's/.*(\([0-9.]*\)).*/\1/p' | head -n1)
        if [[ $ip =~ $ipv4_re ]]; then
            echo "$ip"
            return 0
        fi
    fi
    return 1
}

ensure_packages() {
    log_info "\n–®–∞–≥ 1: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    declare -A packages=(
        [git]='git'
        [docker]='docker.io'
        [docker-compose]='docker-compose'
        [nginx]='nginx'
        [curl]='curl'
        [certbot]='certbot'
        [dig]='dnsutils'
    )
    local missing=()
    for cmd in "${!packages[@]}"; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            log_warn "–£—Ç–∏–ª–∏—Ç–∞ '$cmd' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞–∫–µ—Ç '${packages[$cmd]}'."
            missing+=("${packages[$cmd]}")
        else
            log_success "‚úî $cmd —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        fi
    done
    if ((${#missing[@]})); then
        sudo apt-get update
        sudo apt-get install -y "${missing[@]}"
    else
        log_info "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç."
    fi
}

ensure_services() {
    for service in docker nginx; do
        if ! sudo systemctl is-active --quiet "$service"; then
            log_warn "–°–µ—Ä–≤–∏—Å $service –Ω–µ –∑–∞–ø—É—â–µ–Ω. –í–∫–ª—é—á–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º..."
            sudo systemctl enable "$service"
            sudo systemctl start "$service"
        else
            log_success "‚úî –°–µ—Ä–≤–∏—Å $service –∞–∫—Ç–∏–≤–µ–Ω."
        fi
    done
}

configure_nginx() {
    local domain="$1"
    local port="$2"
    local nginx_conf="$3"
    local nginx_link="$4"

    log_info "\n–®–∞–≥ 4: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx"
    sudo rm -f /etc/nginx/sites-enabled/default
    sudo tee "$nginx_conf" >/dev/null <<EOF
server {
    listen ${port} ssl http2;
    listen [::]:${port} ssl http2;
    server_name ${domain};

    ssl_certificate /etc/letsencrypt/live/${domain}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${domain}/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    location / {
        proxy_pass http://127.0.0.1:1488;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF

    if [[ ! -L "$nginx_link" ]]; then
        sudo ln -s "$nginx_conf" "$nginx_link"
    fi
    sudo nginx -t
    sudo systemctl reload nginx
    log_success "‚úî –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx –æ–±–Ω–æ–≤–ª–µ–Ω–∞."
}

REPO_URL="https://github.com/tweopi/remnawave-shopbot.git"
PROJECT_DIR="remnawave-shopbot"
NGINX_CONF="/etc/nginx/sites-available/${PROJECT_DIR}.conf"
NGINX_LINK="/etc/nginx/sites-enabled/${PROJECT_DIR}.conf"

log_success "--- –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Remnawave ShopBot ---"

if [[ -f "$NGINX_CONF" ]]; then
    log_info "\n–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è. –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
    if [[ ! -d "$PROJECT_DIR" ]]; then
        log_error "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –∫–∞—Ç–∞–ª–æ–≥ '${PROJECT_DIR}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –£–¥–∞–ª–∏—Ç–µ $NGINX_CONF –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É."
        exit 1
    fi
    cd "$PROJECT_DIR"
    log_info "\n–®–∞–≥ 1: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞"
    git pull --ff-only
    log_success "‚úî –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω."
    log_info "\n–®–∞–≥ 2: –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    sudo docker-compose down --remove-orphans
    sudo docker-compose up -d --build
    log_success "\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    exit 0
fi

log_info "\n–°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞."

ensure_packages
ensure_services

log_info "\n–®–∞–≥ 2: –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
if [[ ! -d "$PROJECT_DIR/.git" ]]; then
    git clone "$REPO_URL" "$PROJECT_DIR"
else
    log_warn "–ö–∞—Ç–∞–ª–æ–≥ $PROJECT_DIR —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è."
fi
cd "$PROJECT_DIR"
log_success "‚úî –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Remnawave ShopBot –≥–æ—Ç–æ–≤."

log_info "\n–®–∞–≥ 3: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–º–µ–Ω–∞ –∏ SSL"

prompt "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, my-vpn-shop.com): " USER_DOMAIN_INPUT
DOMAIN=$(sanitize_domain "$USER_DOMAIN_INPUT")
if [[ -z "$DOMAIN" ]]; then
    log_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞."
    exit 1
fi

prompt "–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è Let's Encrypt: " EMAIL
if [[ -z "$EMAIL" ]]; then
    log_error "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –≤—ã–ø—É—Å–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."
    exit 1
fi

SERVER_IP=$(get_server_ip || true)
DOMAIN_IP=$(resolve_domain_ip "$DOMAIN" || true)

if [[ -n "$SERVER_IP" ]]; then
    log_info "IP —Å–µ—Ä–≤–µ—Ä–∞: ${SERVER_IP}"
else
    log_warn "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IP —Å–µ—Ä–≤–µ—Ä–∞."
fi

if [[ -n "$DOMAIN_IP" ]]; then
    log_info "IP –¥–æ–º–µ–Ω–∞ ${DOMAIN}: ${DOMAIN_IP}"
else
    log_warn "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP –¥–ª—è –¥–æ–º–µ–Ω–∞ ${DOMAIN}."
fi

if [[ -n "$SERVER_IP" && -n "$DOMAIN_IP" && "$SERVER_IP" != "$DOMAIN_IP" ]]; then
    log_warn "DNS-–∑–∞–ø–∏—Å—å –¥–æ–º–µ–Ω–∞ ${DOMAIN} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å IP —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞."
    if ! confirm "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É? (y/n): "; then
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
        exit 1
    fi
fi

if command -v ufw >/dev/null 2>&1 && sudo ufw status | grep -q 'Status: active'; then
    log_warn "–û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π UFW. –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç—ã 80, 443, 1488, 8443."
    sudo ufw allow 80/tcp
    sudo ufw allow 443/tcp
    sudo ufw allow 1488/tcp
    sudo ufw allow 8443/tcp
fi

if [[ -d "/etc/letsencrypt/live/${DOMAIN}" ]]; then
    log_success "‚úî SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è ${DOMAIN} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."
else
    log_info "–ü–æ–ª—É—á–µ–Ω–∏–µ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è ${DOMAIN}..."
    sudo certbot --nginx -d "$DOMAIN" --email "$EMAIL" --agree-tos --non-interactive --redirect
    log_success "‚úî –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã Let's Encrypt —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã."
fi

prompt "–ö–∞–∫–æ–π –ø–æ—Ä—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ YooKassa? (443 –∏–ª–∏ 8443, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8443): " YOOKASSA_PORT_INPUT
YOOKASSA_PORT="${YOOKASSA_PORT_INPUT:-8443}"
if [[ "$YOOKASSA_PORT" != "443" && "$YOOKASSA_PORT" != "8443" ]]; then
    log_warn "–£–∫–∞–∑–∞–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø–æ—Ä—Ç. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω 8443."
    YOOKASSA_PORT=8443
fi

configure_nginx "$DOMAIN" "$YOOKASSA_PORT" "$NGINX_CONF" "$NGINX_LINK"

log_info "\n–®–∞–≥ 5: —Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
if [[ -n "$(sudo docker-compose ps -q 2>/dev/null)" ]]; then
    sudo docker-compose down
fi
sudo docker-compose up -d --build

cat <<SUMMARY

${GREEN}=====================================================${NC}
${GREEN}      üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Remnawave ShopBot –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ      ${NC}
${GREEN}=====================================================${NC}

–í–µ–±-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É:
  - ${YELLOW}https://${DOMAIN}:${YOOKASSA_PORT}/login${NC}

–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞:
  - –õ–æ–≥–∏–Ω:  ${CYAN}admin${NC}
  - –ü–∞—Ä–æ–ª—å: ${CYAN}admin${NC}

–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏—Ç–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞.
URL –≤–µ–±—Ö—É–∫–∞ YooKassa: ${YELLOW}https://${DOMAIN}:${YOOKASSA_PORT}/yookassa-webhook${NC}

SUMMARY
