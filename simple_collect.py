#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
"""
import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def collect_metrics_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫"""
    print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫...")
    
    try:
        # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å psutil
        import psutil
        
        # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        print("üìä –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫...")
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã:")
        print(f"  - CPU: {cpu_percent}%")
        print(f"  - Memory: {memory.percent}%")
        print(f"  - Disk: {disk.percent}%")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        from shop_bot.data_manager.database import insert_resource_metric, get_latest_resource_metric, get_metrics_series
        
        metric_id = insert_resource_metric(
            scope='local',
            object_name='panel',
            cpu_percent=cpu_percent,
            mem_percent=memory.percent,
            disk_percent=disk.percent,
            raw_json=json.dumps({
                "cpu_percent": cpu_percent,
                "memory_percent": memory.percent,
                "disk_percent": disk.percent,
                "timestamp": datetime.now().isoformat()
            })
        )
        
        if metric_id:
            print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID: {metric_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            latest = get_latest_resource_metric('local', 'panel')
            if latest:
                print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ:")
                print(f"  - ID: {latest.get('id')}")
                print(f"  - –í—Ä–µ–º—è: {latest.get('created_at')}")
                print(f"  - CPU: {latest.get('cpu_percent')}%")
                print(f"  - Memory: {latest.get('mem_percent')}%")
                print(f"  - Disk: {latest.get('disk_percent')}%")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è 1-—á–∞—Å–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è 1-—á–∞—Å–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞...")
                series_1h = get_metrics_series('local', 'panel', since_hours=1, limit=10)
                print(f"–ù–∞–π–¥–µ–Ω–æ {len(series_1h)} –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")
                
                if series_1h:
                    print("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:")
                    for i, record in enumerate(series_1h[-3:], 1):
                        print(f"  {i}. {record.get('created_at')} - CPU:{record.get('cpu_percent')}% MEM:{record.get('mem_percent')}% DISK:{record.get('disk_percent')}%")
                else:
                    print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")
                
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –º–µ—Ç—Ä–∏–∫—É")
                return False
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫—É")
            return False
            
    except ImportError:
        print("‚ùå psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: apt install python3-psutil")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –º–µ—Ç—Ä–∏–∫: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫")
    print("=" * 50)
    
    success = collect_metrics_simple()
    
    if success:
        print("\nüéâ –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        print("\nüí° –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:")
        print("  1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:1488/monitor")
        print("  2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ '1—á'")
        print("  3. –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –≥—Ä–∞—Ñ–∏–∫–µ")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ psutil: apt install python3-psutil")

if __name__ == "__main__":
    main()
