#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""
import sys
import os
import sqlite3
import json
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def test_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ò—â–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_files = [
        "users-20251005-173430.db",
        "users.db",
        "/app/project/users.db"
    ]
    
    db_file = None
    for db_path in db_files:
        if os.path.exists(db_path):
            db_file = db_path
            break
    
    if not db_file:
        print("‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"‚úÖ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω: {db_file}")
    
    try:
        with sqlite3.connect(db_file) as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='resource_metrics'")
            if not cursor.fetchone():
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ resource_metrics –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
            
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ resource_metrics —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute("SELECT COUNT(*) FROM resource_metrics")
            count = cursor.fetchone()[0]
            print(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {count}")
            
            if count > 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                cursor.execute("""
                    SELECT scope, object_name, created_at, cpu_percent, mem_percent, disk_percent 
                    FROM resource_metrics 
                    ORDER BY created_at DESC 
                    LIMIT 3
                """)
                rows = cursor.fetchall()
                print("üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:")
                for row in rows:
                    print(f"  - {row[0]}/{row[1]} | {row[2]} | CPU:{row[3]}% MEM:{row[4]}% DISK:{row[5]}%")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                cursor.execute("""
                    SELECT COUNT(*) FROM resource_metrics 
                    WHERE scope = 'local' AND object_name = 'panel'
                    AND created_at >= datetime('now', '-1 hours')
                """)
                count_1h = cursor.fetchone()[0]
                print(f"üìä –ó–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {count_1h}")
                
                if count_1h > 0:
                    print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –Ω–∞–π–¥–µ–Ω—ã")
                    return True
                else:
                    print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å")
                    return False
            else:
                print("‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞")
                return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_settings():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from shop_bot.data_manager.database import get_setting
        
        monitoring_enabled = get_setting("monitoring_enabled")
        monitoring_interval = get_setting("monitoring_interval_sec")
        
        print(f"üìã monitoring_enabled: {monitoring_enabled}")
        print(f"üìã monitoring_interval_sec: {monitoring_interval}")
        
        if monitoring_enabled != "true":
            print("‚ö†Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω, –≤–∫–ª—é—á–∞–µ–º...")
            from shop_bot.data_manager.database import update_setting
            update_setting("monitoring_enabled", "true")
            update_setting("monitoring_interval_sec", "300")
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return False

def test_metrics_collection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –±–µ–∑ psutil"""
    print("\nüñ•Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫...")
    
    try:
        # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å psutil
        import psutil
        
        # –°–æ–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
        print(f"  - CPU: {cpu_percent}%")
        print(f"  - Memory: {memory.percent}%")
        print(f"  - Disk: {disk.percent}%")
        
        return True
        
    except ImportError:
        print("‚ö†Ô∏è  psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
        print("–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: apt install python3-psutil")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –º–µ—Ç—Ä–∏–∫: {e}")
        return False

def insert_test_metric():
    """–í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –º–µ—Ç—Ä–∏–∫—É"""
    print("\nüìù –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –º–µ—Ç—Ä–∏–∫–∏...")
    
    try:
        from shop_bot.data_manager.database import insert_resource_metric
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        import psutil
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É
        metric_id = insert_resource_metric(
            scope='local',
            object_name='panel',
            cpu_percent=cpu_percent,
            mem_percent=memory.percent,
            disk_percent=disk.percent,
            raw_json=json.dumps({
                "cpu_percent": cpu_percent,
                "memory_percent": memory.percent,
                "disk_percent": disk.percent,
                "timestamp": datetime.now().isoformat()
            })
        )
        
        if metric_id:
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å ID: {metric_id}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –º–µ—Ç—Ä–∏–∫—É")
            return False
            
    except ImportError:
        print("‚ö†Ô∏è  psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—Ç–∞–≤–∫—É –º–µ—Ç—Ä–∏–∫–∏")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –º–µ—Ç—Ä–∏–∫–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_ok = test_database()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings_ok = test_settings()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫
    metrics_ok = test_metrics_collection()
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –º–µ—Ç—Ä–∏–∫—É
    if metrics_ok:
        insert_ok = insert_test_metric()
    else:
        insert_ok = True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    
    print("\n" + "=" * 60)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ OK' if db_ok else '‚ùå –ü–†–û–ë–õ–ï–ú–ê'}")
    print(f"  –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {'‚úÖ OK' if settings_ok else '‚ùå –ü–†–û–ë–õ–ï–ú–ê'}")
    print(f"  –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫: {'‚úÖ OK' if metrics_ok else '‚ùå –ü–†–û–ë–õ–ï–ú–ê'}")
    print(f"  –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ OK' if insert_ok else '‚ùå –ü–†–û–ë–õ–ï–ú–ê'}")
    
    if db_ok and settings_ok:
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("  1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python3 -m shop_bot")
        print("  2. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:1488/monitor")
        print("  3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ '1—á' - –≥—Ä–∞—Ñ–∏–∫ –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è")
        print("  4. –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ–±–∏—Ä–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        
        if not metrics_ok:
            print("\n‚ö†Ô∏è  –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ psutil:")
            print("   apt install python3-psutil")
    else:
        print("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        if not db_ok:
            print("  - –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        if not settings_ok:
            print("  - –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")

if __name__ == "__main__":
    main()
