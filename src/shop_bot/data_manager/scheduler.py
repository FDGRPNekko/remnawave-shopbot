import asyncio
import logging
import json

from datetime import datetime, timedelta

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Bot

from shop_bot.bot_controller import BotController
from shop_bot.data_manager import remnawave_repository as rw_repo
from shop_bot.data_manager import resource_monitor
from shop_bot.data_manager import speedtest_runner
from shop_bot.data_manager import backup_manager

from shop_bot.modules import remnawave_api
from shop_bot.bot import keyboards

CHECK_INTERVAL_SECONDS = 300
NOTIFY_BEFORE_HOURS = {72, 48, 24, 1}
notified_users = {}

logger = logging.getLogger(__name__)

# –ó–∞–ø—É—Å–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏ 3 —Ä–∞–∑–∞ –≤ —Å—É—Ç–∫–∏ (–∫–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤)
# –ó–∞–ø—É—Å–∫–∞–µ–º –¢–û–õ–¨–ö–û –¥–ª—è SSH-—Ü–µ–ª–µ–π.
SPEEDTEST_INTERVAL_SECONDS = 8 * 3600
_last_speedtests_run_at: datetime | None = None
_last_backup_run_at: datetime | None = None
_last_resource_collect_at: datetime | None = None
_last_resource_alert_at: dict[tuple[str, str, str], datetime] = {}

def format_time_left(hours: int) -> str:
    if hours >= 24:
        days = hours // 24
        if days % 10 == 1 and days % 100 != 11:
            return f"{days} –¥–µ–Ω—å"
        elif 2 <= days % 10 <= 4 and (days % 100 < 10 or days % 100 >= 20):
            return f"{days} –¥–Ω—è"
        else:
            return f"{days} –¥–Ω–µ–π"
    else:
        if hours % 10 == 1 and hours % 100 != 11:
            return f"{hours} —á–∞—Å"
        elif 2 <= hours % 10 <= 4 and (hours % 100 < 10 or hours % 100 >= 20):
            return f"{hours} —á–∞—Å–∞"
        else:
            return f"{hours} —á–∞—Å–æ–≤"

async def send_subscription_notification(bot: Bot, user_id: int, key_id: int, time_left_hours: int, expiry_date: datetime):
    try:
        time_text = format_time_left(time_left_hours)
        expiry_str = expiry_date.strftime('%d.%m.%Y –≤ %H:%M')
        
        message = (
            f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** ‚ö†Ô∏è\n\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ **{time_text}**.\n"
            f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: **{expiry_str}**\n\n"
            f"–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞—Ç—å—Å—è –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN!"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîë –ú–æ–∏ –∫–ª—é—á–∏", callback_data="manage_keys")
        builder.button(text="‚ûï –ü—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á", callback_data=f"extend_key_{key_id}")
        builder.adjust(2)
        
        await bot.send_message(chat_id=user_id, text=message, reply_markup=builder.as_markup(), parse_mode='Markdown')
        logger.debug(f"Scheduler: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ –∫–ª—é—á—É {key_id} (–æ—Å—Ç–∞–ª–æ—Å—å {time_left_hours} —á).")
        
    except Exception as e:
        logger.error(f"Scheduler: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def _cleanup_notified_users(all_db_keys: list[dict]):
    if not notified_users:
        return

    logger.debug("Scheduler: –û—á–∏—â–∞—é –∫—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    active_key_ids = {key['key_id'] for key in all_db_keys}
    
    users_to_check = list(notified_users.keys())
    
    cleaned_users = 0
    cleaned_keys = 0

    for user_id in users_to_check:
        keys_to_check = list(notified_users[user_id].keys())
        for key_id in keys_to_check:
            if key_id not in active_key_ids:
                del notified_users[user_id][key_id]
                cleaned_keys += 1
        
        if not notified_users[user_id]:
            del notified_users[user_id]
            cleaned_users += 1
    
    if cleaned_users > 0 or cleaned_keys > 0:
        logger.debug(f"Scheduler: –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {cleaned_users}, –∫–ª—é—á–µ–π: {cleaned_keys}.")

async def check_expiring_subscriptions(bot: Bot):
    logger.debug("Scheduler: –ü—Ä–æ–≤–µ—Ä—è—é –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...")
    current_time = datetime.now()
    all_keys = rw_repo.get_all_keys()
    
    _cleanup_notified_users(all_keys)
    
    for key in all_keys:
        try:
            expiry_date = datetime.fromisoformat(key['expiry_date'])
            time_left = expiry_date - current_time

            if time_left.total_seconds() < 0:
                continue

            total_hours_left = int(time_left.total_seconds() / 3600)
            user_id = key['user_id']
            key_id = key['key_id']

            for hours_mark in NOTIFY_BEFORE_HOURS:
                if hours_mark - 1 < total_hours_left <= hours_mark:
                    notified_users.setdefault(user_id, {}).setdefault(key_id, set())
                    
                    if hours_mark not in notified_users[user_id][key_id]:
                        await send_subscription_notification(bot, user_id, key_id, hours_mark, expiry_date)
                        notified_users[user_id][key_id].add(hours_mark)
                    break 
                    
        except Exception as e:
            logger.error(f"Scheduler: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–ª—è –∫–ª—é—á–∞ {key.get('key_id')}: {e}")

async def sync_keys_with_panels():
    logger.debug("Scheduler: –ó–∞–ø—É—Å–∫–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Remnawave API...")
    total_affected_records = 0

    squads = rw_repo.list_squads()
    if not squads:
        logger.debug("Scheduler: –°–∫–≤–∞–¥—ã Remnawave –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return

    for squad in squads:
        host_name = (squad.get('host_name') or squad.get('name') or '').strip() or 'unknown'
        squad_uuid = (squad.get('squad_uuid') or squad.get('squadUuid') or '').strip()
        if not squad_uuid:
            logger.warning("Scheduler: –°–∫–≤–∞–¥ '%s' –Ω–µ –∏–º–µ–µ—Ç squad_uuid ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.", host_name)
            continue

        try:
            remote_users = await remnawave_api.list_users(host_name=host_name, squad_uuid=squad_uuid)
        except Exception as exc:
            logger.error("Scheduler: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Remnawave –¥–ª—è '%s': %s", host_name, exc)
            continue

        remote_by_email: dict[str, tuple[str, dict]] = {}
        for remote_user in remote_users or []:
            raw_email = (remote_user.get('email') or remote_user.get('accountEmail') or '').strip()
            if not raw_email:
                continue
            remote_by_email[raw_email.lower()] = (raw_email, remote_user)

        keys_in_db = rw_repo.get_keys_for_host(host_name) or []
        now = datetime.now()

        for db_key in keys_in_db:
            raw_email = (db_key.get('key_email') or db_key.get('email') or '').strip()
            normalized_email = raw_email.lower()
            if not raw_email:
                continue

            remote_entry = remote_by_email.pop(normalized_email, None)
            remote_email = None
            remote_user = None
            if remote_entry:
                remote_email, remote_user = remote_entry

            expiry_raw = db_key.get('expiry_date') or db_key.get('expire_at')
            try:
                expiry_date = datetime.fromisoformat(str(expiry_raw)) if expiry_raw else None
            except Exception:
                try:
                    expiry_date = datetime.fromisoformat(str(expiry_raw).replace('Z', '+00:00'))
                except Exception:
                    expiry_date = None

            if expiry_date and expiry_date < now - timedelta(days=5):
                logger.debug(
                    "Scheduler: –ö–ª—é—á '%s' (host '%s') –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –±–æ–ª–µ–µ 5 –¥–Ω–µ–π. –£–¥–∞–ª—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Remnawave –∏ –ë–î.",
                    raw_email,
                    host_name,
                )
                try:
                    await remnawave_api.delete_client_on_host(host_name, remote_email or raw_email)
                except Exception as exc:
                    logger.error(
                        "Scheduler: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '%s' –∏–∑ Remnawave: %s",
                        raw_email,
                        exc,
                    )
                if rw_repo.delete_key_by_email(raw_email):
                    total_affected_records += 1
                continue

            if remote_user:
                expire_value = remote_user.get('expireAt') or remote_user.get('expiryDate')
                remote_dt = None
                if expire_value:
                    try:
                        remote_dt = datetime.fromisoformat(str(expire_value).replace('Z', '+00:00'))
                    except Exception:
                        remote_dt = None
                local_ms = int(expiry_date.timestamp() * 1000) if expiry_date else None
                remote_ms = int(remote_dt.timestamp() * 1000) if remote_dt else None
                subscription_url = remnawave_api.extract_subscription_url(remote_user)
                local_subscription = db_key.get('subscription_url') or db_key.get('connection_string')

                needs_update = False
                if remote_ms is not None and local_ms is not None and abs(remote_ms - local_ms) > 1000:
                    needs_update = True
                if subscription_url and subscription_url != local_subscription:
                    needs_update = True

                if needs_update:
                    if rw_repo.update_key_status_from_server(raw_email, remote_user):
                        total_affected_records += 1
                        logger.debug(
                            "Scheduler: –û–±–Ω–æ–≤–ª—ë–Ω –∫–ª—é—á '%s' –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö Remnawave (host '%s').",
                            raw_email,
                            host_name,
                        )
            else:
                logger.warning(
                    "Scheduler: –ö–ª—é—á '%s' (host '%s') –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ Remnawave. –ü–æ–º–µ—á–∞—é –∫ —É–¥–∞–ª–µ–Ω–∏—é –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î.",
                    raw_email,
                    host_name,
                )
                if rw_repo.update_key_status_from_server(raw_email, None):
                    total_affected_records += 1

        if remote_by_email:
            for normalized_email, (remote_email, remote_user) in remote_by_email.items():
                import re

                match = re.search(r"user(\d+)", remote_email)
                user_id = int(match.group(1)) if match else None
                if not user_id:
                    logger.warning(
                        "Scheduler: –û—Å–∏—Ä–æ—Ç–µ–≤—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '%s' –≤ Remnawave –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç user_id ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é.",
                        remote_email,
                    )
                    continue

                if not rw_repo.get_user(user_id):
                    logger.warning(
                        "Scheduler: –û—Å–∏—Ä–æ—Ç–µ–≤—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '%s' —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ user_id=%s.",
                        remote_email,
                        user_id,
                    )
                    continue

                if rw_repo.get_key_by_email(remote_email):
                    continue

                payload = dict(remote_user)
                payload.setdefault('host_name', host_name)
                payload.setdefault('squad_uuid', squad_uuid)
                payload.setdefault('squadUuid', squad_uuid)

                new_id = rw_repo.record_key_from_payload(
                    user_id=user_id,
                    payload=payload,
                    host_name=host_name,
                    description=payload.get('description'),
                    tag=payload.get('tag'),
                )
                if new_id:
                    total_affected_records += 1
                    logger.info(
                        "Scheduler: –ü—Ä–∏–≤—è–∑–∞–ª –æ—Å–∏—Ä–æ—Ç–µ–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '%s' (host '%s') –∫ user_id=%s –∫–∞–∫ key_id=%s.",
                        remote_email,
                        host_name,
                        user_id,
                        new_id,
                    )
                else:
                    logger.warning(
                        "Scheduler: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –æ—Å–∏—Ä–æ—Ç–µ–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '%s' (host '%s').",
                        remote_email,
                        host_name,
                    )

    logger.debug(
        "Scheduler: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Remnawave API –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –∑–∞–ø–∏—Å–µ–π: %s.",
        total_affected_records,
    )
async def periodic_subscription_check(bot_controller: BotController):
    logger.info("Scheduler: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω.")
    await asyncio.sleep(10)

    while True:
        try:
            await sync_keys_with_panels()

            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ –≤—Å–µ–º —Ö–æ—Å—Ç–∞–º (–æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: SSH –∏ —Å–µ—Ç–µ–≤–æ–π)
            await _maybe_run_periodic_speedtests()

            # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–±—ç–∫–∞–ø –ë–î —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∞–¥–º–∏–Ω–∞–º
            bot = bot_controller.get_bot_instance() if bot_controller.get_status().get("is_running") else None
            if bot:
                await _maybe_run_daily_backup(bot)

            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –∏ –∞–ª–µ—Ä—Ç—ã
            bot = bot_controller.get_bot_instance() if bot_controller.get_status().get("is_running") else None
            await _maybe_collect_resource_metrics(bot)

            if bot_controller.get_status().get("is_running"):
                bot = bot_controller.get_bot_instance()
                if bot:
                    await check_expiring_subscriptions(bot)
                else:
                    logger.warning("Scheduler: –ë–æ—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π, –Ω–æ —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            else:
                logger.debug("Scheduler: –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–æ–ø—É—â–µ–Ω—ã.")

        except Exception as e:
            logger.error(f"Scheduler: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)
            
        logger.info(f"Scheduler: –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL_SECONDS} —Å–µ–∫.")
        await asyncio.sleep(CHECK_INTERVAL_SECONDS)

async def _maybe_run_periodic_speedtests():
    global _last_speedtests_run_at
    now = datetime.now()
    if _last_speedtests_run_at and (now - _last_speedtests_run_at).total_seconds() < SPEEDTEST_INTERVAL_SECONDS:
        return
    try:
        await _run_speedtests_for_all_ssh_targets()
        _last_speedtests_run_at = now
    except Exception as e:
        logger.error(f"Scheduler: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ speedtests: {e}", exc_info=True)

async def _run_speedtests_for_all_hosts():
    hosts = rw_repo.get_all_hosts()
    if not hosts:
        logger.debug("Scheduler: –ù–µ—Ç —Ö–æ—Å—Ç–æ–≤ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏.")
        return
    logger.info(f"Scheduler: –ó–∞–ø—É—Å–∫–∞—é speedtest –¥–ª—è {len(hosts)} —Ö–æ—Å—Ç(–æ–≤)...")
    for h in hosts:
        host_name = h.get('host_name')
        if not host_name:
            continue
        try:
            logger.info(f"Scheduler: Speedtest –¥–ª—è '{host_name}' –∑–∞–ø—É—â–µ–Ω...")
            # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–∞–∂–¥—ã–π —Ö–æ—Å—Ç —Ç–∞–π–º–∞—É—Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–Ω—É—Ç—å –Ω–∞–¥–æ–ª–≥–æ
            try:
                async with asyncio.timeout(180):
                    res = await speedtest_runner.run_both_for_host(host_name)
            except AttributeError:
                # –î–ª—è Python <3.11: fallback —á–µ—Ä–µ–∑ wait_for
                res = await asyncio.wait_for(speedtest_runner.run_both_for_host(host_name), timeout=180)
            ok = res.get('ok')
            err = res.get('error')
            if ok:
                logger.info(f"Scheduler: Speedtest –¥–ª—è '{host_name}' –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning(f"Scheduler: Speedtest –¥–ª—è '{host_name}' –∑–∞–≤–µ—Ä—à—ë–Ω —Å –æ—à–∏–±–∫–∞–º–∏: {err}")
        except asyncio.TimeoutError:
            logger.warning(f"Scheduler: –¢–∞–π–º–∞—É—Ç speedtest –¥–ª—è —Ö–æ—Å—Ç–∞ '{host_name}'")
        except Exception as e:
            logger.error(f"Scheduler: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è speedtest –¥–ª—è '{host_name}': {e}", exc_info=True)

async def _run_speedtests_for_all_ssh_targets():
    targets = rw_repo.get_all_ssh_targets() or []
    if not targets:
        logger.debug("Scheduler: –ù–µ—Ç SSH-—Ü–µ–ª–µ–π –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏.")
        return
    logger.info(f"Scheduler: –ó–∞–ø—É—Å–∫–∞—é SSH speedtest –¥–ª—è {len(targets)} —Ü–µ–ª(–µ–π)...")
    for t in targets:
        target_name = (t.get('target_name') or '').strip()
        if not target_name:
            continue
        try:
            logger.info(f"Scheduler: SSH speedtest –¥–ª—è —Ü–µ–ª–∏ '{target_name}' –∑–∞–ø—É—â–µ–Ω...")
            try:
                async with asyncio.timeout(180):
                    res = await speedtest_runner.run_and_store_ssh_speedtest_for_target(target_name)
            except AttributeError:
                res = await asyncio.wait_for(speedtest_runner.run_and_store_ssh_speedtest_for_target(target_name), timeout=180)
            ok = res.get('ok')
            err = res.get('error')
            if ok:
                logger.info(f"Scheduler: SSH speedtest –¥–ª—è —Ü–µ–ª–∏ '{target_name}' –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning(f"Scheduler: SSH speedtest –¥–ª—è —Ü–µ–ª–∏ '{target_name}' –∑–∞–≤–µ—Ä—à—ë–Ω —Å –æ—à–∏–±–∫–∞–º–∏: {err}")
        except asyncio.TimeoutError:
            logger.warning(f"Scheduler: –¢–∞–π–º–∞—É—Ç SSH speedtest –¥–ª—è —Ü–µ–ª–∏ '{target_name}'")
        except Exception as e:
            logger.error(f"Scheduler: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SSH speedtest –¥–ª—è —Ü–µ–ª–∏ '{target_name}': {e}", exc_info=True)



async def _maybe_collect_resource_metrics(bot: Bot | None):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫ (–ª–æ–∫–∞–ª—å–Ω–æ + SSH –Ω–∞ —Ö–æ—Å—Ç–∞—Ö) –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤.
    –ß–∏—Ç–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
      - monitoring_enabled (true/false)
      - monitoring_interval_sec (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300)
      - monitoring_cpu_threshold, monitoring_mem_threshold, monitoring_disk_threshold (–ø—Ä–æ—Ü–µ–Ω—Ç—ã)
      - monitoring_alert_cooldown_sec (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3600)
    """
    global _last_resource_collect_at, _last_resource_alert_at
    try:
        enabled = (rw_repo.get_setting("monitoring_enabled") or "true").strip().lower() == "true"
        if not enabled:
            return
        try:
            interval_sec = int((rw_repo.get_setting("monitoring_interval_sec") or "300").strip() or 300)
        except Exception:
            interval_sec = 300
        now = datetime.now()
        if _last_resource_collect_at and (now - _last_resource_collect_at).total_seconds() < max(30, interval_sec):
            return

        # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        def _to_int(s: str | None, default: int) -> int:
            try:
                return int((s or "").strip() or default)
            except Exception:
                return default
        cpu_thr = _to_int(rw_repo.get_setting("monitoring_cpu_threshold"), 90)
        mem_thr = _to_int(rw_repo.get_setting("monitoring_mem_threshold"), 90)
        disk_thr = _to_int(rw_repo.get_setting("monitoring_disk_threshold"), 90)
        cooldown = _to_int(rw_repo.get_setting("monitoring_alert_cooldown_sec"), 3600)

        # 1) –õ–æ–∫–∞–ª—å–Ω–æ
        try:
            local = resource_monitor.get_local_metrics()
            cpu_p = (local.get('cpu') or {}).get('percent')
            mem_p = (local.get('memory') or {}).get('percent')
            disks = local.get('disks') or []
            disk_p = max((d.get('percent') or 0) for d in disks) if disks else None
            rw_repo.insert_resource_metric(
                'local', 'panel',
                cpu_percent=cpu_p, mem_percent=mem_p, disk_percent=disk_p,
                load1=(local.get('cpu') or {}).get('loadavg',[None])[0] if (local.get('cpu') or {}).get('loadavg') else None,
                net_bytes_sent=(local.get('net') or {}).get('bytes_sent'),
                net_bytes_recv=(local.get('net') or {}).get('bytes_recv'),
                raw_json=json.dumps(local, ensure_ascii=False)
            )
            await _maybe_alert(bot, scope='local', name='panel', cpu=cpu_p, mem=mem_p, disk=disk_p,
                               cpu_thr=cpu_thr, mem_thr=mem_thr, disk_thr=disk_thr, cooldown_sec=cooldown)
        except Exception:
            logger.debug("Scheduler: local metrics collection failed", exc_info=True)

        # 2) –î–ª—è –≤—Å–µ—Ö —Ö–æ—Å—Ç–æ–≤ —Å SSH
        hosts = rw_repo.get_all_hosts() or []
        for h in hosts:
            name = h.get('host_name') or ''
            if not name:
                continue
            # –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ SSH –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if not (h.get('ssh_host') and h.get('ssh_user')):
                continue
            try:
                rm = resource_monitor.get_remote_metrics_for_host(name)
                mem_p = (rm.get('memory') or {}).get('percent')
                disks = rm.get('disks') or []
                disk_p = max((d.get('percent') or 0) for d in disks) if disks else None
                rw_repo.insert_resource_metric(
                    'host', name,
                    mem_percent=mem_p,
                    disk_percent=disk_p,
                    load1=(rm.get('loadavg') or [None])[0],
                    raw_json=json.dumps(rm, ensure_ascii=False)
                )
                await _maybe_alert(bot, scope='host', name=name, cpu=None, mem=mem_p, disk=disk_p,
                                   cpu_thr=cpu_thr, mem_thr=mem_thr, disk_thr=disk_thr, cooldown_sec=cooldown)
            except Exception:
                logger.debug("Scheduler: host metrics collection failed for %s", name, exc_info=True)

        _last_resource_collect_at = now
    except Exception:
        logger.error("Scheduler: –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤", exc_info=True)


async def _maybe_run_daily_backup(bot: Bot):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–±—ç–∫–∞–ø –±–∞–∑—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∞–º. –ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–¥–∞—ë—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö backup_interval_days."""
    global _last_backup_run_at
    now = datetime.now()
    try:
        s = rw_repo.get_setting("backup_interval_days") or "1"
        days = int(str(s).strip() or "1")
    except Exception:
        days = 1
    if days <= 0:
        return
    interval_seconds = max(1, days) * 24 * 3600
    if _last_backup_run_at and (now - _last_backup_run_at).total_seconds() < interval_seconds:
        return
    try:
        zip_path = backup_manager.create_backup_file()
        if zip_path and zip_path.exists():
            try:
                sent = await backup_manager.send_backup_to_admins(bot, zip_path)
                logger.info(f"Scheduler: –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø {zip_path.name}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {sent} –∞–¥–º.")
            except Exception as e:
                logger.error(f"Scheduler: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—ç–∫–∞–ø: {e}")
            try:
                backup_manager.cleanup_old_backups(keep=7)
            except Exception:
                pass
        _last_backup_run_at = now
    except Exception as e:
        logger.error(f"Scheduler: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—ç–∫–∞–ø–∞: {e}", exc_info=True)


async def _maybe_alert(
    bot: Bot | None,
    *,
    scope: str,
    name: str,
    cpu: float | None,
    mem: float | None,
    disk: float | None,
    cpu_thr: int,
    mem_thr: int,
    disk_thr: int,
    cooldown_sec: int,
):
    if not bot:
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–µ –ø–æ—Ä–æ–≥–∏
    cpu_warning = max(50, cpu_thr - 20)
    mem_warning = max(50, mem_thr - 20)
    disk_warning = max(50, disk_thr - 20)
    
    breaches: list[dict] = []
    alerts: list[dict] = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    if cpu is not None:
        if cpu >= cpu_thr:
            breaches.append({
                'type': '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä',
                'value': cpu,
                'threshold': cpu_thr,
                'level': 'critical',
                'emoji': 'üî¥'
            })
        elif cpu >= cpu_warning:
            alerts.append({
                'type': '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä',
                'value': cpu,
                'threshold': cpu_warning,
                'level': 'warning',
                'emoji': 'üü°'
            })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
    if mem is not None:
        if mem >= mem_thr:
            breaches.append({
                'type': '–ü–∞–º—è—Ç—å',
                'value': mem,
                'threshold': mem_thr,
                'level': 'critical',
                'emoji': 'üî¥'
            })
        elif mem >= mem_warning:
            alerts.append({
                'type': '–ü–∞–º—è—Ç—å',
                'value': mem,
                'threshold': mem_warning,
                'level': 'warning',
                'emoji': 'üü°'
            })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Disk
    if disk is not None:
        if disk >= disk_thr:
            breaches.append({
                'type': '–î–∏—Å–∫',
                'value': disk,
                'threshold': disk_thr,
                'level': 'critical',
                'emoji': 'üî¥'
            })
        elif disk >= disk_warning:
            alerts.append({
                'type': '–î–∏—Å–∫',
                'value': disk,
                'threshold': disk_warning,
                'level': 'warning',
                'emoji': 'üü°'
            })
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã
    if breaches:
        key = (scope, name, "critical", ",".join(sorted([b['type'] for b in breaches])))
        now = datetime.now()
        last = _last_resource_alert_at.get(key)
        if not last or (now - last).total_seconds() >= max(60, cooldown_sec):
            _last_resource_alert_at[key] = now
            await _send_alert(bot, scope, name, breaches, 'critical')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (—Ä–µ–∂–µ)
    if alerts:
        key = (scope, name, "warning", ",".join(sorted([a['type'] for a in alerts])))
        now = datetime.now()
        last = _last_resource_alert_at.get(key)
        if not last or (now - last).total_seconds() >= max(300, cooldown_sec * 2):  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Ä–µ–∂–µ
            _last_resource_alert_at[key] = now
            await _send_alert(bot, scope, name, alerts, 'warning')


async def _send_alert(bot: Bot, scope: str, name: str, issues: list[dict], level: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –∞–¥–º–∏–Ω–∞–º"""
    try:
        admin_ids = rw_repo.get_admin_ids() or set()
    except Exception:
        admin_ids = set()
    if not admin_ids:
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if level == 'critical':
        header_emoji = "üö®"
        header_text = "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–õ–ï–†–¢"
    else:
        header_emoji = "‚ö†Ô∏è"
        header_text = "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç
    if scope == 'local':
        obj_name = f"üñ•Ô∏è –ü–∞–Ω–µ–ª—å ({name})"
    elif scope == 'host':
        obj_name = f"üñ•Ô∏è –•–æ—Å—Ç {name}"
    elif scope == 'target':
        obj_name = f"üîå SSH-—Ü–µ–ª—å {name}"
    else:
        obj_name = f"‚ùì {scope}:{name}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text_lines = [
        f"{header_emoji} <b>{header_text}</b>",
        "",
        f"üéØ <b>–û–±—ä–µ–∫—Ç:</b> {obj_name}",
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> <code>{datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</code>",
        "",
        "üìä <b>–ü—Ä–æ–±–ª–µ–º—ã:</b>"
    ]
    
    for issue in issues:
        emoji = issue['emoji']
        type_name = issue['type']
        value = issue['value']
        threshold = issue['threshold']
        text_lines.append(f"  {emoji} <b>{type_name}:</b> {value:.1f}% (–ø–æ—Ä–æ–≥: {threshold}%)")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    text_lines.extend([
        "",
        "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>",
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–∏—Å—Ç–µ–º—É",
        "‚Ä¢ –û—Å–≤–æ–±–æ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ",
        "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏",
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    ])
    
    text = "\n".join(text_lines)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in admin_ids:
        try:
            await bot.send_message(admin_id, text, parse_mode='HTML')
        except Exception:
            continue



